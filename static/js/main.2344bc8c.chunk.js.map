{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","this","renderSquare","i","squares","Component","Game","state","history","Array","fill","xIsNext","stepNumber","step","setState","slice","length","calculateWinner","concat","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"iPAKA,SAASA,EAAOC,GACR,OACA,4BAAQC,UAAU,SACjBC,QAAW,kBAAMF,EAAME,YACrBF,EAAMG,O,IAMTC,E,uKAqBF,OACE,6BAEE,yBAAKH,UAAU,aACZI,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,IAErB,yBAAKL,UAAU,aACZI,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,IAErB,yBAAKL,UAAU,aACZI,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,O,mCAKdC,GAAI,IAAD,OACZ,OAAO,kBAACR,EAAD,CAAQI,MAASE,KAAKL,MAAMQ,QAAQD,GAC3CL,QAAW,kBAAM,EAAKF,MAAME,QAAQK,U,GA5CtBE,aAmDdC,E,kDACF,WAAYV,GAAO,IAAD,8BACd,cAAMA,IACDW,MAAQ,CACTC,QAAS,CACL,CAACJ,QAASK,MAAM,GAAGC,KAAK,QAE5BC,SAAS,EACTC,WAAY,GAPF,E,mDAWXC,GACHZ,KAAKa,SAAS,CACVF,WAAYC,EACZF,QAAUE,EAAO,IAAO,M,kCAIpBV,GACV,IAAMK,EAAUP,KAAKM,MAAMC,QAAQO,MAAM,EAAEd,KAAKM,MAAMK,WAAa,GAE7DR,EADUI,EAAQA,EAAQQ,OAAS,GACjBZ,QAAQW,QAE7BE,EAAgBb,IAAYA,EAAQD,KAIvCC,EAAQD,GAAKF,KAAKM,MAAMI,QAAU,IAAM,IAExCV,KAAKa,SAAS,CACVN,QAASA,EAAQU,OAAO,CAAC,CACrBd,QAAQA,KAEZQ,WAAYJ,EAAQQ,OACpBL,SAAUV,KAAKM,MAAMI,a,+BAGnB,IAgBFQ,EAhBC,OACCX,EAAUP,KAAKM,MAAMC,QACrBY,EAAUZ,EAAQP,KAAKM,MAAMK,YAC7BS,EAASJ,EAAgBG,EAAQhB,SAEjCkB,EAAQd,EAAQe,KAAI,SAACV,EAAKW,GAC5B,IAAMC,EAAOD,EAAO,eAAiBA,EAAM,mBAE/C,OACI,wBAAIE,IAAOF,GACP,4BAAQ1B,QAAS,kBAAM,EAAK6B,OAAOH,KAC9BC,OAaf,OALMN,EAFDE,EAEU,WAAaA,EAGb,iBAAkBpB,KAAKM,MAAMI,QAAU,IAAM,KAG1D,yBAAKd,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACG,EAAD,CAAOI,QAASgB,EAAQhB,QAChBN,QAAW,SAACK,GAAD,OAAO,EAAKyB,YAAYzB,OAG7C,yBAAKN,UAAU,aACb,6BAAOsB,GACP,4BAAKG,S,GAvEIjB,aA8EnB,SAASY,EAAgBb,GAWvB,IAVA,IAAMyB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEA1B,EAAI,EAAGA,EAAI0B,EAAMb,OAAQb,IAAK,CAAC,IAAD,cACnB0B,EAAM1B,GADa,GAC9B2B,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAI5B,EAAQ0B,IAAM1B,EAAQ0B,KAAO1B,EAAQ2B,IAAM3B,EAAQ0B,KAAO1B,EAAQ4B,GACpE,OAAO5B,EAAQ0B,GAGnB,OAAO,KAKTG,IAASC,OACP,kBAAC5B,EAAD,MACA6B,SAASC,eAAe,W","file":"static/js/main.2344bc8c.chunk.js","sourcesContent":["import React,{Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n \n\nfunction Square(props) {\n        return (\n        <button className=\"square\"\n         onClick = {() => props.onClick()}>\n          {props.value}\n        </button>\n      );\n    \n  }\n\n  class Board extends Component {\n    \n    // constructor(props){\n    //     super(props)\n    //     this.state = {\n    //         squares: Array(9).fill(null),\n    //         xIsNext: true,\n    //     }\n    // }\n    render() {\n        // const winner = calculateWinner(this.state.squares);\n        // let status;\n        // if(winner)\n        // {\n        //     status = 'Winner: ' + winner\n        // }\n        // else{\n        //     status = 'Next player: '+ (this.state.xIsNext ? 'X' : '0')\n        // }\n    //   const status = 'Next player: '+ (this.state.xIsNext ? 'X' : 'O');\n  \n      return (\n        <div>\n          {/* <div className=\"status\">{status}</div> */}\n          <div className=\"board-row\">\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(6)}\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n          </div>\n        </div>\n      );\n    }\n    renderSquare(i) {\n        return <Square value = {this.props.squares[i]} \n        onClick = {() => this.props.onClick(i)} />;\n      }\n\n     \n    \n  }\n\n  class Game extends Component {\n      constructor(props){\n          super(props)\n          this.state = {\n              history: [\n                  {squares: Array(9).fill(null)}\n              ],\n              xIsNext: true,\n              stepNumber: 0\n          }\n      }\n\n      jumpTo(step){\n          this.setState({\n              stepNumber: step,\n              xIsNext: (step % 2) === 0 ,\n          })\n      }\n\n      handleClick(i){\n        const history = this.state.history.slice(0,this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n                  \n        if(calculateWinner(squares) || squares[i]){\n            return;\n        }\n      \n        squares[i] = this.state.xIsNext ? 'X' : '0';\n      //   console.log(squares);\n        this.setState({\n            history: history.concat([{\n                squares:squares,\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n      })\n    }\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        const moves = history.map((step,move)=> {\n            const desc = move ? 'Go to move #' + move: 'Go to game start';\n        \n        return(\n            <li key = {move}>\n                <button onClick={() => this.jumpTo(move)}> \n                    {desc}\n                </button>\n            </li>\n        )\n        });\n        let status;\n        if(winner)\n        {\n            status = 'Winner: ' + winner\n        }\n        else{\n            status = 'Next player: '+ (this.state.xIsNext ? 'X' : '0')\n        }\n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board squares={current.squares}\n                    onClick = {(i) => this.handleClick(i)}\n                    />\n          </div>\n          <div className=\"game-info\">\n            <div>{ status }</div>\n            <ol>{moves}</ol>\n          </div>\n        </div>\n      );\n    }\n  }\n\n  function calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );\n  "],"sourceRoot":""}